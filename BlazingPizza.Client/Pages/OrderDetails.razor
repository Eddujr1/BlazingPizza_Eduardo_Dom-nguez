@page "/myorders/{orderId:int}"
@attribute [Authorize]
@using System.Threading
@inject OrdersClient OrdersClient
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>Blazing Pizza - Order Details</PageTitle>

<div class="main">
    @if (invalidOrder)
    {
        <h2>Nope</h2>
        <p>Sorry, this order could not be loaded.</p>
    }
    else if (orderWithStatus is null)
    {
        <text>Loading...</text>
    }
    else
    {
        <div class="track-order">
            <div class="track-order-title">
                <h2>
                    Order placed @orderWithStatus.Order.CreatedTime.ToLongDateString()
                </h2>
                <p class="ml-auto mb-0">
                    Status: <strong>@orderWithStatus.StatusText</strong>
                </p>
            </div>
            <div class="track-order-body">
                <div class="track-order-details">
                    <OrderReview Order="orderWithStatus.Order" />
                </div>
                <div class="track-order-map">
                    <Map Zoom="13" Markers="orderWithStatus.MapMarkers" />
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public int OrderId { get; set; }

    OrderWithStatus? orderWithStatus;
    bool invalidOrder;
    CancellationTokenSource? pollingCancellationToken;

    protected override void OnParametersSet()
    {
        // Si ya estábamos haciendo polling para una orden diferente, deja de hacerlo
        pollingCancellationToken?.Cancel();

        // Inicia un nuevo bucle de polling
        PollForUpdates();
    }

    private async void PollForUpdates()
    {
        invalidOrder = false;
        pollingCancellationToken = new CancellationTokenSource();
        while (!pollingCancellationToken.IsCancellationRequested)
        {
            try
            {
                orderWithStatus = await OrdersClient.GetOrder(OrderId);
                StateHasChanged();

                if (orderWithStatus.IsDelivered)
                {
                    pollingCancellationToken.Cancel();
                }
                else
                {
                    await Task.Delay(4000);
                }
            }
            catch (AccessTokenNotAvailableException ex)
            {
                pollingCancellationToken.Cancel();
                ex.Redirect();
            }
            catch (Exception ex)
            {
                invalidOrder = true;
                pollingCancellationToken.Cancel();
                Console.Error.WriteLine(ex);
                StateHasChanged();
            }
        }
    }

    private async Task ShowNotificationAsync(string message)
    {
        await JS.InvokeVoidAsync("alert", message);
    }

    public async Task AddPizzaToCart(Pizza pizza)
    {
        try
        {
          

            // Mostrar notificación de éxito
            await ShowNotificationAsync("¡Pizza añadida al carrito con éxito!");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            // Manejar error
        }
    }

    private async Task OnAddPizzaClick(Pizza pizza)
    {
        await AddPizzaToCart(pizza);
    }

    void IDisposable.Dispose()
    {
        pollingCancellationToken?.Cancel();
    }
}
